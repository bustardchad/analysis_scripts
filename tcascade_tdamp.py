# script whose primary purpose is to return cascade time over damping time
# also stores velocity divergence for a few runs, which were used to get an
# estimate of the cascade time

import numpy as np
import matplotlib.pyplot as plt

# function to get rolling derivative
def get_deriv(ykey,xkey,smooth = None):
    """Return derivative of `ykey` wrt to `xkey`
     while keeping the lenght constant.
      Keywords:
     * hst           -- HST numpy array
       * ykey          -- other y values or key to take the derivate
       * xkey          -- key
       * smooth        -- smooth over length in units of `xkey`
     """
    y = ykey
    x = xkey
    # x = hst[xkey]
    # if isinstance(ykey, (str, basestring)):
    #     y = hst[ykey]
    # else:
    #     assert len(ykey) == len(x), "`key` has to be string or array of length `x`"
    #     y = ykey
    dx = (x[1:] - x[:-1])
    dydx = (y[1:] - y[:-1]) / dx
    if smooth is not None:
        if isinstance(smooth, int):
            n = smooth
        else:
            n = np.round(smooth / np.median(dx))
        dydx = np.convolve(dydx, np.ones(int(n)) / n, mode='same')

    r = np.interp(x, 0.5 * (x[1:] + x[:-1]), dydx)
    return r


# directory on local computer holdling the relevant .hst file
dir = './crbeta1/corrected/streaming/iso_plusDiff/plusDiff/beta1/res512/'
time, mass, ke1, ke2, ke3, me1, me2, me3, ec = np.loadtxt(dir+'cr.hst',skiprows = 2, usecols = (0,2,6,7,8,9,10,11,12),unpack=True)


vval = []
csval = []




edenstocgs = 6.54e-11
cellVol1 = (2.0)**3.0
ketot = []
metot = []
thermaletot = []
ectot = []

for j in range(0,len(time),1):
  keval = (ke1[j] + ke2[j] + ke3[j])*edenstocgs/cellVol1
  ketot.append(keval)
  meval = (me1[j] + me2[j] + me3[j])*edenstocgs/cellVol1
  cs2 = (.11*1e8)**2.0
  csval.append(np.sqrt(cs2))
  ecval = ec[j]*edenstocgs/cellVol1
  vval.append((np.sqrt(2*(ke1[j] + ke2[j] + ke3[j])/(mass[j])) * 1.e8))
  metot.append(meval)
  ectot.append(ecval)


print(len(ectot))
# Change these to get slope between different start and end points
#start = 60000
#end = 100000
start = 200
end = 300


p0 = np.polyfit(time[start:end],np.log10(np.array(ectot[start:end])),1)
growthTime_log = (1/(p0[0]*np.log(10)))
predicted = 300


# Pcr/Pg
CRPresGasPres = np.array(ectot)*0.333/(1.67e-28*1e14)

# t_eddy assuming Mach = 0.5
timeeddy = np.array(time)*3.155e13/(0.667*3.0856e21/5.e6)


# v_ph ~ c_s = 1e7 for CGM
print("L*v_ph = {}".format(3.0856e21*1e7))

#print("Diff = LVph: Predicted growth time (Myrs) = {}".format(0.0))
print("Diff = Lvph: Simulation growth time (Myrs) = {}".format(growthTime_log) )


plt.semilogy(timeeddy,ketot,linewidth=1)
plt.xlabel(r'$t/ \tau_{eddy}$',fontsize=18)
plt.ylabel('KE Energy Density',fontsize=18)
plt.legend()
plt.tight_layout()
plt.savefig(dir+'KE_EnergyDensity_Compare.pdf')
plt.close()

plt.semilogy(timeeddy,vval,linewidth=1)
plt.xlabel(r'$t/ \tau_{eddy}$',fontsize=18)
plt.ylabel('Average Velocity (cm/s)',fontsize=18)
plt.legend()
plt.tight_layout()
plt.savefig(dir+'Velocity_Compare.pdf')
plt.close()

plt.semilogy(timeeddy,CRPresGasPres,linewidth=2)
plt.xlabel(r'$t/ \tau_{eddy}$',fontsize=18)
plt.ylabel(r'$P_{CR}/P_{g}$',fontsize=18)
#plt.legend()
plt.tight_layout()
plt.savefig(dir+'CRPresGasPres.pdf')
plt.close()


plt.semilogy(timeeddy,ectot,linewidth=1)
plt.xlabel(r'$t/ \tau_{eddy}$',fontsize=18)
plt.ylabel('CR Energy Density',fontsize=18)
#plt.legend()
plt.tight_layout()
plt.savefig(dir+'CR_EnergyDensity_Compare_semilog.pdf')
plt.close()

plt.semilogy(timeeddy,metot,linewidth=1)
plt.xlabel(r'$t/ \tau_{eddy}$',fontsize=18)
plt.ylabel('Magnetic Energy Density',fontsize=18)
plt.legend()
plt.tight_layout()
plt.savefig(dir+'Magnetic_EnergyDensity_Compare.pdf')
plt.close()



# new -- total energy
plt.semilogy(timeeddy,np.array(metot) + np.array(ectot) + np.array(ketot),linewidth=1)
plt.xlabel(r'$t/ \tau_{eddy}$',fontsize=18)
plt.ylabel('Total Energy Density',fontsize=18)
plt.legend()
plt.tight_layout()
plt.savefig(dir+'Total_EnergyDensity_Compare.pdf')
plt.close()

totE_codeunits = (np.array(metot) + np.array(ectot) + np.array(ketot))/edenstocgs

# new -- total energy
print("dedt: ")
print(get_deriv(totE_codeunits,time,smooth=2000))
plt.semilogy(time,totE_codeunits,linewidth=1,label="Simulation Total Energy Density")
plt.semilogy(time,totE_codeunits - np.array(ectot)/edenstocgs,linewidth=1,label="Simulation Eb + Ek")
plt.semilogy(time,totE_codeunits[0]*np.ones(len(time)) + np.array(time)*(3.0e-5)/8,linewidth=1,label="Energy Conservation")
plt.xlabel(r't',fontsize=18)
plt.ylabel('Total Energy Density',fontsize=18)
plt.legend()
plt.tight_layout()
plt.savefig(dir+'Total_EnergyDensity_Compare_codeunits.pdf')
plt.close()

"""
plt.plot(time,.03066*((np.array(vval)/1e8)**3.0)/0.667,'k-.',label=r"$\rho v^{3} / L$")
plt.axhline(y=3e-5/cellVol1, color='r', linestyle='-',label="Driving dE/dt")
plt.semilogy(time,get_deriv(totE_codeunits,time,smooth=2000),linewidth=1,label="Total dE/dt")
plt.semilogy(time,get_deriv(np.array(ectot)/edenstocgs,time,smooth=2000),linewidth=1,label=r"dE$_{CR}$/dt")
plt.semilogy(time,get_deriv(np.array(ketot)/edenstocgs,time,smooth=20000),linewidth=1,label=r"dE$_{k}$/dt")
plt.semilogy(time,get_deriv(np.array(metot)/edenstocgs,time,smooth=20000),linewidth=1,label=r"dE$_{B}$/dt")
plt.ylim(1e-7,5e-5)
plt.xlabel(r't',fontsize=18)
plt.ylabel('dE/dt',fontsize=18)
plt.title(r"$P_{CR}/P_{g} \sim 100$",fontsize=22)
plt.legend()
plt.tight_layout()
plt.savefig(dir+'dEdt_codeunits.pdf')
plt.close()
"""

dpcrdt = (1./3.)*np.mean(get_deriv(np.array(ectot)/edenstocgs,time,smooth=2000))
print(dpcrdt)

 # Volume averaged sqrt((velocity divergence)^2) = RMS velocity divergence
 # All are for res = 256^3, at the sweetspot

veldiv_pcpg00001 = [0.01175330079907943 , 0.053580277229456214 , 0.07067146864649015 , 0.10022120184460354 , 0.1278210091218658 , 0.1681158839983493 , 0.20534047549171783 , 0.24928390955801977 , 0.2840199822797256 , 0.30986942247704574 , 0.3244103283017408 , 0.33591361204539466 , 0.34785641325315053 , 0.3472421170058225 , 0.35524642300262765 , 0.36175754240840247 , 0.37966855916996706 , 0.3721292348134243 , 0.3800836610477628 , 0.38442224512366685 , 0.385397077225715 , 0.3798423565171183 , 0.37596999618525834 , 0.3726035508706652 , 0.3678952922112816 , 0.37882799379527476 , 0.3706721531701743 , 0.37568161086168816 , 0.367998150739923 , 0.3599694646028635 , 0.36590169245514037 , 0.3548762817840675 , 0.3722409617867244 , 0.355914010732441 , 0.35150685720710373 , 0.3501972668351927 , 0.3369472757341421 , 0.3418751470237047 , 0.3322815264052063 , 0.3352149452077225 , 0.3278100052252466 , 0.3308811298948254 , 0.3379146918603386 , 0.3318888792172892 , 0.3233254617744304 , 0.3347549025078621 , 0.33960922292259405 , 0.34056789618755223 , 0.3514470859652945 , 0.3446704941390065 , 0.34667228705838765 , 0.34246373502045613 , 0.34503693055154505 ]


veldiv_pcpg01 = [0.011753300799079434 , 0.05269770516650134 , 0.06948560651614577 , 0.09640245463072625 , 0.12061238736984173 , 0.15565536521074202 , 0.18436425385897476 , 0.22363265094468965 , 0.2397016852756074 , 0.2652376102614268 , 0.27265392063348065 , 0.28058147913799764 , 0.2856650213296326 , 0.2898652068541506 , 0.28810191029495336 , 0.29866907460740166 , 0.3149122371806001 , 0.294096716304871 , 0.30450424955133626 , 0.3081382805927993 , 0.3065340504021197 , 0.295056169203037 , 0.28965681858158204 , 0.29355167421362593 , 0.29623570617393913 , 0.29984278605992226 , 0.2964093070687085 , 0.2975204481441556 , 0.3059429721001863 , 0.29319721210973204 , 0.292455907506444 , 0.28231751495764124 , 0.2707297620714051 , 0.26613610134252746 , 0.2653710039050895 , 0.2652705960363801 , 0.255456532709062 , 0.2528845513041694 , 0.25892208724153337 , 0.25225640609175903 , 0.24908256639719215 , 0.24671300202669538 , 0.25774101939783517 , 0.24763375087635192 , 0.2510133965092366 , 0.2520676016219974 , 0.24820394710280072 , 0.23895736447387766 , 0.24793087568501956 , 0.23692986985102613 , 0.22648181062649003 , 0.23810331923961064 , 0.23755025203421337 , 0.23449306832907815 , 0.2361328143133567 , 0.23877709533516625 ]


veldiv_pcpg05 = [0.011753300799079434 , 0.051005315277426085 , 0.06817695493269216 , 0.09428372206528415 , 0.10293022814261236 , 0.12938764749609577 , 0.1412337321854403 , 0.17606144388722111 , 0.18029634778128323 , 0.20488966141835213 , 0.1931800548242082 , 0.19844139671135516 , 0.19381028878501635 , 0.19744275125402638 , 0.19689974696098406 , 0.19776227901194737 , 0.20066873014813702 , 0.20465665854201895 , 0.21370787404856928 , 0.20566502960894373 , 0.20900500001570493 , 0.19617443184928446 , 0.19736259462777797 , 0.20678192641678272 , 0.2053881569255233 , 0.1980216921719472 , 0.19122787483648968 , 0.19849022229035812 , 0.24055170935962383 , 0.21858481472255814 , 0.2035586240065479 , 0.20944039134332196 , 0.19341498155880119 , 0.19572074249605642 , 0.18960157561063617 , 0.1785941494013145 , 0.19249579852060852 , 0.18192944089639446 , 0.19376762196320652 , 0.1921701964615788 , 0.18705224772847107 , 0.18737481778702514 , 0.20015692618043304 , 0.18917942346269712 , 0.18847155180920805 , 0.18413965435072202 , 0.19737730945022874 , 0.19139778970318633 , 0.1833450604417324 , 0.18866773431696982 , 0.17993502183070498 , 0.1879920811334639 , 0.18285840078753293 , 0.18310489632556426 , 0.17748992406200204 , 0.17127219367227023 ]


veldiv_pcpg1=[0.01175330079907943,0.0501526729852084,0.06889579123287815,0.09604893061504367,0.09744307731602084,0.12392731814905042,0.13079764650248213,0.1464906626324828,0.1499628092252926,0.1597914913683035,0.17666590465083193,0.16787116978009692,0.16657245257337597,0.18165896577559618,0.1780528468517636,0.16644311896332248,0.1791927345377426,0.1705609712881903,0.17957786490137573,0.17949270281814075,0.17908764968261345,0.18445966599975777,0.17825494724873414,0.1934976447455074,0.1866501346730517,0.1721959205627323,0.17362840228815243,0.16599262635945372,0.16708527973647141,0.1684162114855635,0.16652521647581964,0.18169808342031563,0.2043718335722389,0.18020044093382306,0.18485909677098417,0.17789372421680225,0.17514112250169053,0.17101722427094423,0.18314791104381334,0.16363010441592207,0.16310531674127238,0.16752318918609835,0.16861798773220482,0.16187512012390814,0.17347712500187557,0.17170097340749288,0.15139112463256363,0.16319206694660074,0.1550096218309559,0.15773205260997053,0.1562317880392199,0.1664660516761023,0.16172302763381474]

veldiv_pcpg10=[0.01175330079907943,0.033253986765948096,0.04411844705814531,0.04851562439913057,0.05113399299142367,0.053803844593744495,0.06732200760532135,0.06911500872835535,0.06930005288807413,0.062338596430560535,0.07358134862586213,0.0640474413042094,0.07534836239254371,0.07949985522216818,0.07331151311391747,0.07621600225722491,0.0644700967928739,0.07072921832583937,0.06658001338261502,0.07900845896535334,0.06815094477590895,0.0782969303726302,0.06779103399300496,0.07454184857422744,0.07315347998589403,0.06800466888413303,0.06710231205197378,0.06540891684391721,0.05634523514742015,0.061203936514450136,0.06013519503494592,0.06489775833538797,0.06211237606141656,0.06205077381937857,0.05417290407301449,0.05868669474539364,0.05318262635775075,0.06030960586554,0.061511029560451055,0.05884390063269814,0.06372903560485527,0.057951035045950644,0.08992399742072259,0.07640298367525561,0.06879541262055298,0.069485390140156,0.07561012198289975,0.07542386347341679,0.07454190583777295,0.07270281742023485,0.0622886647943245,0.0708964779601961,0.07167085120556096,0.07158812967361683,0.06187501945851192,0.07181463513559803,0.07117190764163521,0.0679180059312835,0.06038080241620692,0.05513493330607547,0.07048111188661378,0.07319014473207965,0.07317518672929885]

veldiv_pcpg100=[0.01175330079907943,0.018522388524330267,0.02186214738980599,0.026331755351828915,0.023068834852774757,0.021852855732517145,0.025488157862122,0.02714544819151396,0.02441601893659607,0.02362091610675067,0.023538173665252363,0.02998281311513589,0.02970555549051409,0.02847231456860737,0.02537138032857099,0.021795307208509227,0.019853351778380005,0.021137972298289523,0.021757046214547184,0.02002838565565138,0.0227725813965639,0.022007719553894876,0.02150481518268117,0.02450970576546785,0.02039076590023235,0.022291137777506787,0.01747969428868361,0.019948771959555994,0.01836035674439787,0.014657432139351684,0.01805452572940907,0.019978729148641877,0.019633438460505644,0.021474952838071996,0.023138346626391613,0.02227987243554419,0.019930347580325115,0.02081025530541896,0.025722605433701515,0.021732011882154824,0.021605274685942866,0.020122215166937036,0.04192882913347899,0.022840319019255335,0.02115516484485845,0.020289046494952626,0.018813062331335166,0.02147814471415781,0.021933487068101526,0.02093023118400636,0.021473175603410694,0.02162005370542732,0.023624530995767917,0.021432633892336676,0.01853866677790207,0.021811703460196168,0.01860150518785964,0.017010985861744935,0.018691663970545593,0.022373926528791964,0.01904917091574298,0.022649102776520443,0.02019788598788154]

# for lower Mach number ~ 0.15
veldiv_noCRs_lowerMach = [0.15831510536816645 , 0.15918312802632884 , 0.16028405727765824 , 0.16227310625590322 , 0.15963945205615776 , 0.16115637192871402 , 0.1626574083502706 , 0.15870179331710943 , 0.1601515170348217 , 0.15891776622961826 ]

veldiv_pcpg1_lowerMach = [0.08243886353141056 , 0.08084328009290075 , 0.08384166789482388 , 0.07984437552991712 , 0.07775099897387007 , 0.07890991634939053 , 0.08045817258868074 , 0.07840492696789722 , 0.08148661130037631 , 0.07991354739959497 ]

veldiv_pcpg10_lowerMach = [0.03897410634918671 , 0.04046459201687019 , 0.04252400100017469 , 0.03936366865883966 , 0.03255872363579651 , 0.03627469037215739 , 0.037491594512524706 , 0.03414557296751362 , 0.04015052205536703 , 0.03723275740127675 ]

veldiv_pcpg100_lowerMach = [0.011393537521529096 , 0.01321982199548604 , 0.013601030605631108 , 0.011691652329811297 , 0.011777231378178252 , 0.009347635025376536 , 0.012437928667339952 , 0.008580710562465885 , 0.010864094970299401 , 0.010131891975222167 ]

#t_damp ~ rho v^2 t_grow / p_cr
#t_cascade ~ 1/(velocity divergence)

t_damp = 0.03066*(np.mean(vval)/1.e8)**2.0 / dpcrdt
#t_cascade = 1.0/np.mean(veldiv_pcpg100_lowerMach)
t_cascade = 0.667/(np.mean(vval)/1.e8)
print("Average Ms:")
print(np.mean(vval)/1.e7)

print("t_casc / t_damp")
print(t_cascade/t_damp)

print("rho v^2")
print(0.03066*((np.mean(vval)/1.e8)**2.0))

print("rho v^2 <div v>")
print(0.03066*((np.mean(vval)/1.e8)**2.0) * np.mean(veldiv_pcpg100_lowerMach))
